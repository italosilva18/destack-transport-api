version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: destack-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: destack_transport
      POSTGRES_INITDB_ARGS: "-E UTF8"
      TZ: America/Sao_Paulo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db-docker.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d destack_transport"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - destack-network

  # API Go
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: destack-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Usar vari√°veis de ambiente diretamente
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SERVER_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: destack_transport
      DB_SSLMODE: disable
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here_change_in_production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24}
      TZ: America/Sao_Paulo
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - destack-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  destack-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local